// //----------------------
// // <auto-generated>
// //     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// // </auto-generated>
// //----------------------
//
// /* tslint:disable */
// /* eslint-disable */
// // ReSharper disable InconsistentNaming
//
// import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
// import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
// import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
// import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
//
// export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');
//
// @Injectable()
// export class WDClientService {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
//
//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:3000/v0";
//     }
//
//     /**
//      * Get all directory entries
//      * @param limit (optional) the size of one page for pagination
//      * @param offset (optional) the offset of the first entry of the page
//      * @return OK
//      */
//     getDirectoryEntries(limit: number | undefined, offset: number | undefined): Observable<DirectoryEntry[]> {
//         let url_ = this.baseUrl + "/directoryEntry?";
//         if (limit === null)
//             throw new Error("The parameter 'limit' cannot be null.");
//         else if (limit !== undefined)
//             url_ += "limit=" + encodeURIComponent("" + limit) + "&";
//         if (offset === null)
//             throw new Error("The parameter 'offset' cannot be null.");
//         else if (offset !== undefined)
//             url_ += "offset=" + encodeURIComponent("" + offset) + "&";
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "application/json"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetDirectoryEntries(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetDirectoryEntries(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<DirectoryEntry[]>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<DirectoryEntry[]>;
//         }));
//     }
//
//     protected processGetDirectoryEntries(response: HttpResponseBase): Observable<DirectoryEntry[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(DirectoryEntry.fromJS(item));
//             }
//             else {
//                 result200 = <any>null;
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result400 = resultData400 !== undefined ? resultData400 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result401 = resultData401 !== undefined ? resultData401 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result403 = resultData403 !== undefined ? resultData403 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result500 = resultData500 !== undefined ? resultData500 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf(null as any);
//     }
//
//     /**
//      * Create new directory entry
//      * @param body (optional)
//      * @return Created
//      */
//     addDirectoryEntry(body: DirectoryEntry | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/directoryEntry";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAddDirectoryEntry(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAddDirectoryEntry(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<void>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<void>;
//         }));
//     }
//
//     protected processAddDirectoryEntry(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 201) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             return _observableOf(null as any);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result400 = resultData400 !== undefined ? resultData400 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result401 = resultData401 !== undefined ? resultData401 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result403 = resultData403 !== undefined ? resultData403 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 422) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result422: any = null;
//             let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result422 = resultData422 !== undefined ? resultData422 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result422);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result500 = resultData500 !== undefined ? resultData500 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf(null as any);
//     }
//
//     /**
//      * Get directory entry by id
//      * @param id the unique identifier of the directory entry
//      * @return OK
//      */
//     getDirectoryEntryById(id: string): Observable<DirectoryEntry> {
//         let url_ = this.baseUrl + "/directoryEntry/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "application/json"
//             })
//         };
//
//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetDirectoryEntryById(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetDirectoryEntryById(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<DirectoryEntry>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<DirectoryEntry>;
//         }));
//     }
//
//     protected processGetDirectoryEntryById(response: HttpResponseBase): Observable<DirectoryEntry> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = DirectoryEntry.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result400 = resultData400 !== undefined ? resultData400 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result401 = resultData401 !== undefined ? resultData401 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result403 = resultData403 !== undefined ? resultData403 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result404 = resultData404 !== undefined ? resultData404 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result500 = resultData500 !== undefined ? resultData500 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf(null as any);
//     }
//
//     /**
//      * Update directory entry
//      * @param body (optional)
//      * @param id the unique identifier of the directory entry
//      * @return OK
//      */
//     updateDirectoryEntry(body: DirectoryEntry | undefined, id: string): Observable<void> {
//         let url_ = this.baseUrl + "/directoryEntry/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processUpdateDirectoryEntry(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processUpdateDirectoryEntry(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<void>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<void>;
//         }));
//     }
//
//     protected processUpdateDirectoryEntry(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             return _observableOf(null as any);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result400 = resultData400 !== undefined ? resultData400 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result401 = resultData401 !== undefined ? resultData401 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result403 = resultData403 !== undefined ? resultData403 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result404 = resultData404 !== undefined ? resultData404 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 422) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result422: any = null;
//             let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result422 = resultData422 !== undefined ? resultData422 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result422);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result500 = resultData500 !== undefined ? resultData500 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf(null as any);
//     }
//
//     /**
//      * Update directory entry partially
//      * @param body (optional)
//      * @param id the unique identifier of the directory entry
//      * @return OK
//      */
//     updateDirectoryEntryPartially(body: DirectoryEntry | undefined, id: string): Observable<void> {
//         let url_ = this.baseUrl + "/directoryEntry/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = JSON.stringify(body);
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//             })
//         };
//
//         return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processUpdateDirectoryEntryPartially(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processUpdateDirectoryEntryPartially(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<void>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<void>;
//         }));
//     }
//
//     protected processUpdateDirectoryEntryPartially(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             return _observableOf(null as any);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result400 = resultData400 !== undefined ? resultData400 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result401 = resultData401 !== undefined ? resultData401 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result403 = resultData403 !== undefined ? resultData403 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result404 = resultData404 !== undefined ? resultData404 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 422) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result422: any = null;
//             let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result422 = resultData422 !== undefined ? resultData422 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result422);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result500 = resultData500 !== undefined ? resultData500 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf(null as any);
//     }
//
//     /**
//      * Delete directory entry
//      * @param id the unique identifier of the directory entry
//      * @return No Content
//      */
//     deleteDirectoryEntry(id: string): Observable<void> {
//         let url_ = this.baseUrl + "/directoryEntry/{id}";
//         if (id === undefined || id === null)
//             throw new Error("The parameter 'id' must be defined.");
//         url_ = url_.replace("{id}", encodeURIComponent("" + id));
//         url_ = url_.replace(/[?&]$/, "");
//
//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDeleteDirectoryEntry(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDeleteDirectoryEntry(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<void>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<void>;
//         }));
//     }
//
//     protected processDeleteDirectoryEntry(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             return _observableOf(null as any);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result400 = resultData400 !== undefined ? resultData400 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result401 = resultData401 !== undefined ? resultData401 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result403 = resultData403 !== undefined ? resultData403 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 404) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result404: any = null;
//             let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result404 = resultData404 !== undefined ? resultData404 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result404);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result500 = resultData500 !== undefined ? resultData500 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf(null as any);
//     }
//
//     /**
//      * Create directory entries from CSV
//      * @param csvFile (optional)
//      * @return Created
//      */
//     addDirectoryEntriesCsv(csvFile: FileParameter | undefined): Observable<void> {
//         let url_ = this.baseUrl + "/directoryEntry/file/csv";
//         url_ = url_.replace(/[?&]$/, "");
//
//         const content_ = new FormData();
//         if (csvFile === null || csvFile === undefined)
//             throw new Error("The parameter 'csvFile' cannot be null.");
//         else
//             content_.append("csvFile", csvFile.data, csvFile.fileName ? csvFile.fileName : "csvFile");
//
//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//             })
//         };
//
//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAddDirectoryEntriesCsv(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAddDirectoryEntriesCsv(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<void>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<void>;
//         }));
//     }
//
//     protected processAddDirectoryEntriesCsv(response: HttpResponseBase): Observable<void> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;
//
//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 201) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             return _observableOf(null as any);
//             }));
//         } else if (status === 400) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result400: any = null;
//             let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result400 = resultData400 !== undefined ? resultData400 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result400);
//             }));
//         } else if (status === 401) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result401: any = null;
//             let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result401 = resultData401 !== undefined ? resultData401 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result401);
//             }));
//         } else if (status === 403) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result403: any = null;
//             let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result403 = resultData403 !== undefined ? resultData403 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result403);
//             }));
//         } else if (status === 422) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result422: any = null;
//             let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result422 = resultData422 !== undefined ? resultData422 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result422);
//             }));
//         } else if (status === 500) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             let result500: any = null;
//             let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//                 result500 = resultData500 !== undefined ? resultData500 : <any>null;
//
//             return throwException("Response that can either contain detailed information if the user has permission or contain a correlation identifier which can be used for lookup if the user has too less permissions", status, _responseText, _headers, result500);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf(null as any);
//     }
// }
//
// export class DirectoryEntry implements IDirectoryEntry {
//     number!: string;
//     lastName!: string;
//     firstName!: string;
//     email!: string;
//     title?: string;
//     street?: string;
//     postCode?: string;
//     city?: string;
//     country?: string;
//     phoneNumber?: string;
//     mobileNumber?: string;
//     fax?: string;
//     company?: string;
//     position?: string;
//
//     constructor(data?: IDirectoryEntry) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.number = _data["number"];
//             this.lastName = _data["lastName"];
//             this.firstName = _data["firstName"];
//             this.email = _data["email"];
//             this.title = _data["title"];
//             this.street = _data["street"];
//             this.postCode = _data["postCode"];
//             this.city = _data["city"];
//             this.country = _data["country"];
//             this.phoneNumber = _data["phoneNumber"];
//             this.mobileNumber = _data["mobileNumber"];
//             this.fax = _data["fax"];
//             this.company = _data["company"];
//             this.position = _data["position"];
//         }
//     }
//
//     static fromJS(data: any): DirectoryEntry {
//         data = typeof data === 'object' ? data : {};
//         let result = new DirectoryEntry();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["number"] = this.number;
//         data["lastName"] = this.lastName;
//         data["firstName"] = this.firstName;
//         data["email"] = this.email;
//         data["title"] = this.title;
//         data["street"] = this.street;
//         data["postCode"] = this.postCode;
//         data["city"] = this.city;
//         data["country"] = this.country;
//         data["phoneNumber"] = this.phoneNumber;
//         data["mobileNumber"] = this.mobileNumber;
//         data["fax"] = this.fax;
//         data["company"] = this.company;
//         data["position"] = this.position;
//         return data;
//     }
// }
//
// export interface IDirectoryEntry {
//     number: string;
//     lastName: string;
//     firstName: string;
//     email: string;
//     title?: string;
//     street?: string;
//     postCode?: string;
//     city?: string;
//     country?: string;
//     phoneNumber?: string;
//     mobileNumber?: string;
//     fax?: string;
//     company?: string;
//     position?: string;
// }
//
// export class Anonymous implements IAnonymous {
//     /** Type of error */
//     type?: string;
//     /** HTTP status code */
//     status?: number;
//     /** Brief description of the error */
//     title?: string;
//     /** Detailed description of the error */
//     details?: string;
//     /** Who sent the error */
//     instance?: string;
//
//     constructor(data?: IAnonymous) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }
//
//     init(_data?: any) {
//         if (_data) {
//             this.type = _data["type"];
//             this.status = _data["status"];
//             this.title = _data["title"];
//             this.details = _data["details"];
//             this.instance = _data["instance"];
//         }
//     }
//
//     static fromJS(data: any): Anonymous {
//         data = typeof data === 'object' ? data : {};
//         let result = new Anonymous();
//         result.init(data);
//         return result;
//     }
//
//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["type"] = this.type;
//         data["status"] = this.status;
//         data["title"] = this.title;
//         data["details"] = this.details;
//         data["instance"] = this.instance;
//         return data;
//     }
// }
//
// export interface IAnonymous {
//     /** Type of error */
//     type?: string;
//     /** HTTP status code */
//     status?: number;
//     /** Brief description of the error */
//     title?: string;
//     /** Detailed description of the error */
//     details?: string;
//     /** Who sent the error */
//     instance?: string;
// }
//
// export interface FileParameter {
//     data: any;
//     fileName: string;
// }
//
// export class ApiException extends Error {
//     override message: string;
//     status: number;
//     response: string;
//     headers: { [key: string]: any; };
//     result: any;
//
//     constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
//         super();
//
//         this.message = message;
//         this.status = status;
//         this.response = response;
//         this.headers = headers;
//         this.result = result;
//     }
//
//     protected isApiException = true;
//
//     static isApiException(obj: any): obj is ApiException {
//         return obj.isApiException === true;
//     }
// }
//
// function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
//     if (result !== null && result !== undefined)
//         return _observableThrow(result);
//     else
//         return _observableThrow(new ApiException(message, status, response, headers, null));
// }
//
// function blobToText(blob: any): Observable<string> {
//     return new Observable<string>((observer: any) => {
//         if (!blob) {
//             observer.next("");
//             observer.complete();
//         } else {
//             let reader = new FileReader();
//             reader.onload = event => {
//                 observer.next((event.target as any).result);
//                 observer.complete();
//             };
//             reader.readAsText(blob);
//         }
//     });
// }
